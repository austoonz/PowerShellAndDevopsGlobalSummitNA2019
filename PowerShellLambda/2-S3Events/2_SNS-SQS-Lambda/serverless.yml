AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Example of processing S3 Event Messages with SNS fan out to SQS and Lambda

Parameters:

  BucketNamePrefix:
    Type: String
    Description: Name of the S3 Bucket to create

Resources:

  LambdaOne:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./PoshSummitsS3EventFanout/PoshSummitsS3EventFanout.zip
      Handler: PoshSummitsS3EventFanout::PoshSummitsS3EventFanout.Bootstrap::ExecuteFunction
      MemorySize: 1024
      Runtime: dotnetcore2.1
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref Bucket
      Events:
        QueueOne:
          Type: SQS
          Properties:
            Queue: !GetAtt QueueOne.Arn
            BatchSize: 10

  LambdaOneLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaOne}'
      RetentionInDays: 5

  LambdaTwo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./PoshSummitsS3EventFanout/PoshSummitsS3EventFanout.zip
      Handler: PoshSummitsS3EventFanout::PoshSummitsS3EventFanout.Bootstrap::ExecuteFunction
      MemorySize: 1024
      Runtime: dotnetcore2.1
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref Bucket
      Events:
        QueueTwo:
          Type: SQS
          Properties:
            Queue: !GetAtt QueueTwo.Arn
            BatchSize: 10

  LambdaTwoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaTwo}'
      RetentionInDays: 5

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketNamePrefix}-${AWS::Region}'
      NotificationConfiguration:
        TopicConfigurations:
          -
            Event: s3:ObjectCreated:Put
            Topic: !Ref Topic
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  Topic:
    Type: AWS::SNS::Topic

  PoshiObjectTriggerPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref Topic
      PolicyDocument:
        Id: SNSTopicPolicy
        Version: '2012-10-17'
        Statement:
          -
            Sid: S3TriggerAccess
            Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - sns:Publish
            Resource:
              - !Ref Topic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${BucketNamePrefix}-${AWS::Region}"

  QueueOne:
    Type: AWS::SQS::Queue

  QueueOnePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueueOne
      PolicyDocument:
        Id: AllowIncomingAccess
        Statement:
          -
            Effect: Allow
            Principal: '*'
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt QueueOne.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref Topic

  SubscriptionOne:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref Topic
      Endpoint: !GetAtt QueueOne.Arn
      Protocol: sqs
      RawMessageDelivery: true

  QueueTwo:
    Type: AWS::SQS::Queue

  QueueTwoPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueueTwo
      PolicyDocument:
        Id: AllowIncomingAccess
        Statement:
          -
            Effect: Allow
            Principal: '*'
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt QueueTwo.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref Topic

  SubscriptionTwo:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref Topic
      Endpoint: !GetAtt QueueTwo.Arn
      Protocol: sqs
      RawMessageDelivery: true

Outputs:

  BucketName:
    Value: !Ref Bucket

  LambdaFunctionOne:
    Value: !Ref LambdaOne

  LambdaFunctionTwo:
    Value: !Ref LambdaTwo